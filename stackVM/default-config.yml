---
### WARNING: Do not change the structure of this file, only change the values

## Values guidelines:
# All values should represent some numeric value (without decimal points)
# Values under 1024, can just be numbers
# Values over 1024 and under 1048576, can end with K
# Values over 1048576 and under 1073741824, can end with M
# Values over 1073741824, can end with G
# Storage sizes of Terrabytes and above are not currently supported, but can use large numbers to represent them
# soft maxes must be less than hard maxes

# frame refers to an execution frame of a function
# when a function is called, both the caller and callee are "active" frames
# Recursive functions can potentially create a lot of frames
# The numbers for frames represent frames themselves
## Recommendation: 128 - 1M
- frames_soft_max: 2K
- frames_hard_max: 4K

# Stack size is the number of elements that can be held in memory in a frame
# The numbers represent the size of the memory allocate in bytes (divide number by size of DataConstant struct (32 B) to get number of DataConstants)
## Recommentdation: 128 - 1M
- stack_size_soft_max: 256
- stack_size_hard_max: 1K

# The local storage of a frame
# The numbers represent the size of the memory allocate in bytes (divide number by size of DataConstant struct (32 B) to get number of DataConstants)
## Recommendation: 1K - 5M
- locals_soft_max: 64K
- locals_hard_max: 1M

# The size of global VM storage (heap equivalent)
# The numbers represent the size of the memory allocate in bytes (divide number by size of DataConstant struct (32 B) to get number of DataConstants)
## Recommendation: 128K - 4G (or you can allocate 20-25% of available memory)
- globals_soft_max: 1M
- globals_hard_max: 512M
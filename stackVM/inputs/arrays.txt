_func:
    LOAD_CONST 3
    LOAD_CONST 4
    BUILDARR 3 2
    RET

test_copy_arr:
    LOAD 0
    COPYARR
    CALL _reverse_a 1
    DUP
    CALL sort 1
    CALL println 1
    LOAD 0
    CALL println 1
    LOAD_CONST NONE
    RET

test_get_and_write:
    ; locals = [array, index, value]
    LOAD 0
    LOAD 1
    AGET
    CALL println 1
    LOAD 0
    CALL println 1
    LOAD 2
    LOAD 0
    ; the COPYARR instruction below changes the array from pass by reference to pass by value
    ; COPYARR
    LOAD 1
    ASTORE
    STORE 0
    LOAD 0
    CALL println 1
    LOAD 0
    CALL getType 1
    LOAD_CONST NONE
    RET

test_slice_arr:
    LOAD_CONST 1
    LOAD 0
    CALL _slice_a 2
    CALL println 1
    LOAD_CONST NONE
    RET

test_remove_all_values:
    ; the value to remove from the array
    LOAD_CONST 3
    ; the array
    LOAD_CONST 3
    LOAD_CONST 2
    LOAD_CONST 3
    LOAD_CONST 3
    LOAD_CONST 4
    BUILDARR 5 5
    DUP
    CALL println 1
    CALL _remove_all_val_a 2
    CALL println 1
    LOAD_CONST NONE
    RET

test_multidimensional_array:
    LOAD_CONST 3
    LOAD_CONST 2
    BUILDARR 3 2
    BUILDARR 3 0
    LOAD_CONST 6
    LOAD_CONST 5
    LOAD_CONST 4
    BUILDARR 3 3
    BUILDARR 3 3
    DUP
    CALL println 1
    GSTORE
    GLOAD 17
    COPYARR
    RET


test_slice_multidimensional:
    LOAD_CONST 2
    LOAD_CONST 0
    LOAD_CONST 3
    LOAD_CONST 2
    BUILDARR 3 2
    BUILDARR 3 0
    LOAD_CONST 6
    LOAD_CONST 5
    LOAD_CONST 4
    BUILDARR 3 3
    BUILDARR 3 3
    CALL _slice_a 3
    ;DUP
    ;CALL println 1
    ;COPYARR
    ;LOAD_CONST NONE
    RET
    

_entry:
    LOAD_CONST -1
    GSTORE
    CALL _func 0
    GSTORE
    GLOAD 4
    CALL test_copy_arr 1
    LOAD_CONST 0
    LOAD_CONST 2
    GLOAD 4
    CALL test_get_and_write 3
    GLOAD 4
    CALL test_slice_arr 1
    CALL test_remove_all_values 0
    CALL test_multidimensional_array 0
    CALL println 1
    CALL test_slice_multidimensional 0
    CALL println 1
    HALT
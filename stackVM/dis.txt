>>> def test():
...   x = 2
...   y = x + 2
...   y += y - x
...   return x + y
... 
>>> from dis import dis
>>> dis(test)
  1           0 RESUME                   0

  2           2 LOAD_CONST               1 (2)
              4 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              8 LOAD_CONST               1 (2)
             10 BINARY_OP                0 (+)
             14 STORE_FAST               1 (y)

  4          16 LOAD_FAST                1 (y)
             18 LOAD_FAST                1 (y)
             20 LOAD_FAST                0 (x)
             22 BINARY_OP               10 (-)
             26 BINARY_OP               13 (+=)
             30 STORE_FAST               1 (y)

  5          32 LOAD_FAST                0 (x)
             34 LOAD_FAST                1 (y)
             36 BINARY_OP                0 (+)
             40 RETURN_VALUE

>>> def t2():
...   langs = ["C", "C++", "C#", "Java", "Python"]
...   langs.append("Javascript")
...   langs[-1] = "Typescript"
...   return langs[3]
... 
>>> dis(t2)
  1           0 RESUME                   0

  2           2 BUILD_LIST               0
              4 LOAD_CONST               1 (('C', 'C++', 'C#', 'Java', 'Python'))
              6 LIST_EXTEND              1
              8 STORE_FAST               0 (langs)

  3          10 LOAD_FAST                0 (langs)
             12 LOAD_ATTR                1 (NULL|self + append)
             32 LOAD_CONST               2 ('Javascript')
             34 CALL                     1
             42 POP_TOP

  4          44 LOAD_CONST               3 ('Typescript')
             46 LOAD_FAST                0 (langs)
             48 LOAD_CONST               4 (-1)
             50 STORE_SUBSCR

  5          54 LOAD_FAST                0 (langs)
             56 LOAD_CONST               5 (3)
             58 BINARY_SUBSCR
             62 RETURN_VALUE


>>> def t3():
...   s = "Hello"
...   s2 = ", world!"
...   return s + s2
... 
>>> dis(t3)
  1           0 RESUME                   0

  2           2 LOAD_CONST               1 ('Hello')
              4 STORE_FAST               0 (s)

  3           6 LOAD_CONST               2 (', world!')
              8 STORE_FAST               1 (s2)

  4          10 LOAD_FAST                0 (s)
             12 LOAD_FAST                1 (s2)
             14 BINARY_OP                0 (+)
             18 RETURN_VALUE

>>> def fizzbuzz():
...   for i in range(100):
...     if i % 5 == 0 and i % 3 == 0:
...       print("Fizzbuzz")
...     elif i % 5 == 0:
...       print("Fizz")
...     elif i % 3 == 0:
...       print("Buzz")
...     else:
...       print(i)
... 
>>> dis(fizzbuzz)
  1           0 RESUME                   0

  2           2 LOAD_GLOBAL              1 (NULL + range)
             12 LOAD_CONST               1 (100)
             14 CALL                     1
             22 GET_ITER
        >>   24 FOR_ITER                81 (to 190)
             28 STORE_FAST               0 (i)

  3          30 LOAD_FAST                0 (i)
             32 LOAD_CONST               2 (5)
             34 BINARY_OP                6 (%)
             38 LOAD_CONST               3 (0)
             40 COMPARE_OP              40 (==)
             44 POP_JUMP_IF_FALSE       20 (to 86)
             46 LOAD_FAST                0 (i)
             48 LOAD_CONST               4 (3)
             50 BINARY_OP                6 (%)
             54 LOAD_CONST               3 (0)
             56 COMPARE_OP              40 (==)
             60 POP_JUMP_IF_FALSE       12 (to 86)

  4          62 LOAD_GLOBAL              3 (NULL + print)
             72 LOAD_CONST               5 ('Fizzbuzz')
             74 CALL                     1
             82 POP_TOP
             84 JUMP_BACKWARD           31 (to 24)

  5     >>   86 LOAD_FAST                0 (i)
             88 LOAD_CONST               2 (5)
             90 BINARY_OP                6 (%)
             94 LOAD_CONST               3 (0)
             96 COMPARE_OP              40 (==)
            100 POP_JUMP_IF_FALSE       12 (to 126)

  6         102 LOAD_GLOBAL              3 (NULL + print)
            112 LOAD_CONST               6 ('Fizz')
            114 CALL                     1
            122 POP_TOP
            124 JUMP_BACKWARD           51 (to 24)

  7     >>  126 LOAD_FAST                0 (i)
            128 LOAD_CONST               4 (3)
            130 BINARY_OP                6 (%)
            134 LOAD_CONST               3 (0)
            136 COMPARE_OP              40 (==)
            140 POP_JUMP_IF_FALSE       12 (to 166)

  8         142 LOAD_GLOBAL              3 (NULL + print)
            152 LOAD_CONST               7 ('Buzz')
            154 CALL                     1
            162 POP_TOP
            164 JUMP_BACKWARD           71 (to 24)

 10     >>  166 LOAD_GLOBAL              3 (NULL + print)
            176 LOAD_FAST                0 (i)
            178 CALL                     1
            186 POP_TOP
            188 JUMP_BACKWARD           83 (to 24)

  2     >>  190 END_FOR
            192 RETURN_CONST             0 (None)


>>> def fib(n: int) -> int:
...   if n == 0 or n == 1:
...     return n
...   return fib(n-1) + fib(n - 2)
... 
>>> dis(fib)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (n)
              4 LOAD_CONST               1 (0)
              6 COMPARE_OP              40 (==)
             10 POP_JUMP_IF_TRUE         5 (to 22)
             12 LOAD_FAST                0 (n)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP              40 (==)
             20 POP_JUMP_IF_FALSE        2 (to 26)

  3     >>   22 LOAD_FAST                0 (n)
             24 RETURN_VALUE

  4     >>   26 LOAD_GLOBAL              1 (NULL + fib)
             36 LOAD_FAST                0 (n)
             38 LOAD_CONST               2 (1)
             40 BINARY_OP               10 (-)
             44 CALL                     1
             52 LOAD_GLOBAL              1 (NULL + fib)
             62 LOAD_FAST                0 (n)
             64 LOAD_CONST               3 (2)
             66 BINARY_OP               10 (-)
             70 CALL                     1
             78 BINARY_OP                0 (+)
             82 RETURN_VALUE

>>> def square(x):
...   return x * x
... 
>>> dis(square)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_FAST                0 (x)
              6 BINARY_OP                5 (*)
             10 RETURN_VALUE

>>> global x
>>> x = 5
>>> def xplusone():
...   return x + 1
... 
>>> dis(xplusone)
  1           0 RESUME                   0

  2           2 LOAD_GLOBAL              0 (x)
             12 LOAD_CONST               1 (1)
             14 BINARY_OP                0 (+)
             18 RETURN_VALUE


>>> def conditional(x):
...   if x == 0:
...     return x + 1
...   return x
... 
>>> dis(conditional)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_CONST               1 (0)
              6 COMPARE_OP              40 (==)
             10 POP_JUMP_IF_FALSE        5 (to 22)

  3          12 LOAD_FAST                0 (x)
             14 LOAD_CONST               2 (1)
             16 BINARY_OP                0 (+)
             20 RETURN_VALUE

  4     >>   22 LOAD_FAST                0 (x)
             24 RETURN_VALUE

>>> def loop():
...   x = 1
...   while True:
...     x += 1
...     if x >= 100:
...       break
... 
>>> dis(loop)
  1           0 RESUME                   0

  2           2 LOAD_CONST               1 (1)
              4 STORE_FAST               0 (x)

  3           6 NOP

  4     >>    8 LOAD_FAST                0 (x)
             10 LOAD_CONST               1 (1)
             12 BINARY_OP               13 (+=)
             16 STORE_FAST               0 (x)

  5          18 LOAD_FAST                0 (x)
             20 LOAD_CONST               2 (100)
             22 COMPARE_OP              92 (>=)
             26 POP_JUMP_IF_FALSE        1 (to 30)

  6          28 RETURN_CONST             0 (None)

  3     >>   30 JUMP_BACKWARD           12 (to 8)

>>> def select(x):
...   y = x if x == 0 else x + 1
...   return y
... 
>>> dis(select)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_CONST               1 (0)
              6 COMPARE_OP              40 (==)
             10 POP_JUMP_IF_FALSE        4 (to 20)
             12 LOAD_FAST                0 (x)
             14 STORE_FAST               1 (y)

  3          16 LOAD_FAST                1 (y)
             18 RETURN_VALUE

  2     >>   20 LOAD_FAST                0 (x)
             22 LOAD_CONST               2 (1)
             24 BINARY_OP                0 (+)
             28 STORE_FAST               1 (y)

  3          30 LOAD_FAST                1 (y)
             32 RETURN_VALUE

>>> from typing import List
>>> def first(lst: List[int]) -> int:
...   if len(lst) == 0:
...     raise Exception("Nothing to return...")
...   return lst[0]
... 
>>> dis(first)
  1           0 RESUME                   0

  2           2 LOAD_GLOBAL              1 (NULL + len)
             12 LOAD_FAST                0 (lst)
             14 CALL                     1
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP              40 (==)
             28 POP_JUMP_IF_FALSE       11 (to 52)

  3          30 LOAD_GLOBAL              3 (NULL + Exception)
             40 LOAD_CONST               2 ('Nothing to return...')
             42 CALL                     1
             50 RAISE_VARARGS            1

  4     >>   52 LOAD_FAST                0 (lst)
             54 LOAD_CONST               1 (0)
             56 BINARY_SUBSCR
             60 RETURN_VALUE